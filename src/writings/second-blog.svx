---
title: Expo in a monorepo
description: An Expo application can not be integrated inside a monorepo without doing some extra work. Fortunately the Expo team has published some tools to ease our job.
datetime: 2021-06-12T18:48:01.937Z
tags:
  - Front-end
  - React Native
  - Expo
---


Today I encountered some difficulties to make Expo work inside a monorepo.

As part of my studies I have to create a mobile application to listen to music in collaboration with other people. We decided to create it with React Native, and to ease the development, we decided to use [Expo](https://expo.io/). We also decided to organize our project by packages, owned by a single repository. To orchestrate these different packages, we chose to use [Yarn Workspaces](https://classic.yarnpkg.com/en/docs/workspaces/) and [Lerna](https://lerna.js.org/).

With monorepositories, the `node_modules` are shared across all of the packages by default, and are stored at a single place, at the root of the monorepo. If a package needs a different version than others, it will be installed inside the `node_modules` directory of this package.

In general this is perfectly fine. It even reduces your disk usage, comparing to a situation where all the packages would be in different repositories, each having its own independent `node_modules` folders.

However this genius way of managing multiple independent but interlinked pieces of code can become a headache when a tool needs to find a file exactly inside the `node_modules` directory of a package. And guess what? This is the case of Expo.

There are several ways of solving this problem. The easiest one is to disable the mechanism I described before, namely having the dependencies installed at the root of the monorepo and letting Node.js travel directories parent to parent to find the code of the dependency. This mechanism is called hoisting, [as one of the properties of functions in JavaScript](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting). We can disable hoisting by [listing with globs all the dependencies we want to be installed directly in the package node_modules and not on the root node_modules directory](https://classic.yarnpkg.com/blog/2018/02/15/nohoist/#illustration) in the `package.json` of the package, like that:

```json
{
  "name": "@my-application/mobile-application",
  "private": true,
  // Other properties, such as dependencies, devDependencies, etc.
  "workspaces": {
    "nohoist": ["**/react-native", "**/react-native/**"]
  }
}
```
